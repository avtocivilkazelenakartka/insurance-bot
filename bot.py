from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

import os
from aiogram import Bot

bot = Bot(token=os.getenv("BOT_TOKEN"))
OPERATOR_ID = 7630696066  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

user_operator_map = {}  # ID –∫–ª—ñ—î–Ω—Ç–∞ -> –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("üöÄ –ü–æ—á–∞—Ç–∏"))
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add("üöó –ê–≤—Ç–æ—Ü–∏–≤—ñ–ª–∫–∞", "üåç –ó–µ–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∫–∞")
main_menu.add("üè• –ú–µ–¥–∏—á–Ω–µ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è")

back_button = KeyboardButton("üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫")
share_phone_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
)

auto_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üìÑ –ü–æ—Å—Ç—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∞"), KeyboardButton("üïò –¢—Ä–∞–Ω–∑–∏—Ç–Ω—ñ –Ω–æ–º–µ—Ä–∞")
).add(back_button)

duration_menu = ReplyKeyboardMarkup(resize_keyboard=True)
duration_menu.add("15 –¥–Ω—ñ–≤", "1 –º—ñ—Å.", "2 –º—ñ—Å.", "3 –º—ñ—Å.").add(back_button)

class AutoForm(StatesGroup):
    number = State()
    engine = State()
    region = State()
    birth = State()
    term = State()

class GreenCard(StatesGroup):
    duration = State()

class TravelInsurance(StatesGroup):
    country = State()
    duration = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! üëã\n–ù–∞—Ç–∏—Å–Ω–∏ \"–ü–æ—á–∞—Ç–∏\" —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∞—Ä—Ç—ñ—Å—Ç—å —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:", reply_markup=start_keyboard)

@dp.message_handler(Text(equals="üöÄ –ü–æ—á–∞—Ç–∏"))
async def on_start_pressed(message: types.Message, state: FSMContext):
    await state.finish()
    user = message.from_user
    if not user.username:
        await message.answer(
            "‚ö†Ô∏è –û—Å–∫—ñ–ª—å–∫–∏ —É –í–∞—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π username, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏:",
            reply_markup=share_phone_keyboard
        )
        return
    await message.answer("–û–±–µ—Ä–∏ –≤–∏–¥ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:", reply_markup=main_menu)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_handler(message: types.Message):
    contact = message.contact
    await bot.send_message(OPERATOR_ID, f"üìû –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–¥—ñ–ª–∏–≤—Å—è –Ω–æ–º–µ—Ä–æ–º: {contact.phone_number} (ID: {message.from_user.id})")
    await message.answer("‚úÖ –î—è–∫—É—é! –ù–æ–º–µ—Ä –æ—Ç—Ä–∏–º–∞–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:", reply_markup=main_menu)

@dp.message_handler(Text(equals="üöó –ê–≤—Ç–æ—Ü–∏–≤—ñ–ª–∫–∞"))
async def auto_civilka(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–æ–º–µ—Ä—ñ–≤:", reply_markup=auto_menu)

@dp.message_handler(Text(equals="üìÑ –ü–æ—Å—Ç—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∞"))
async def permanent(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–µ—Ä–∂–∞–≤–Ω–∏–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(back_button))
    await AutoForm.number.set()

@dp.message_handler(Text(equals="üïò –¢—Ä–∞–Ω–∑–∏—Ç–Ω—ñ –Ω–æ–º–µ—Ä–∞"))
async def transit(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º –¥–≤–∏–≥—É–Ω–∞:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(back_button))
    await AutoForm.engine.set()
    await state.update_data(transit=True)

@dp.message_handler(Text(equals="üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫"))
async def go_back(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–û–±–µ—Ä–∏ –≤–∏–¥ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:", reply_markup=main_menu)

@dp.message_handler(state=AutoForm.number)
async def get_number(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(number=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º –¥–≤–∏–≥—É–Ω–∞:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(back_button))
    await AutoForm.next()

@dp.message_handler(state=AutoForm.engine)
async def get_engine(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(engine=message.text)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(back_button))
    await AutoForm.next()

@dp.message_handler(state=AutoForm.region)
async def get_region(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(region=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–º–æ–ª–æ–¥—à–æ–≥–æ –≤–æ–¥—ñ—è:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(back_button))
    await AutoForm.next()

@dp.message_handler(state=AutoForm.birth)
async def get_birth(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(birth=message.text)
    data = await state.get_data()
    if data.get('transit'):
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:", reply_markup=duration_menu)
        await AutoForm.term.set()
    else:
        await send_to_operator_and_finish(message, state)

@dp.message_handler(state=AutoForm.term)
async def get_term(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(term=message.text)
    await send_to_operator_and_finish(message, state)

async def send_to_operator_and_finish(message, state):
    data = await state.get_data()
    user = message.from_user
    username = f"@{user.username}" if user.username else user.full_name
    text = f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user.id})\n"
    text += "üöò –ó–∞–ø–∏—Ç –Ω–∞ –ê–≤—Ç–æ—Ü–∏–≤—ñ–ª–∫—É:\n"
    for key, val in data.items():
        text += f"{key.capitalize()}: {val}\n"
    msg = await bot.send_message(OPERATOR_ID, text)
    user_operator_map[msg.message_id] = user.id
    await message.answer("‚úÖ –î–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ó–∞ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è! üíº")
    await state.finish()

@dp.message_handler(Text(equals="üåç –ó–µ–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∫–∞"))
async def green_card(message: types.Message):
    await message.answer("üóìÔ∏è –í–∫–∞–∂—ñ—Ç—å –Ω–∞ —è–∫–∏–π —Ç–µ—Ä–º—ñ–Ω –±–∞–∂–∞—î—Ç–µ (–≤—ñ–¥ 15 –¥–Ω—ñ–≤ –¥–æ 12 –º—ñ—Å.):", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(back_button))
    await GreenCard.duration.set()

@dp.message_handler(state=GreenCard.duration)
async def green_card_duration(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    user = message.from_user
    username = f"@{user.username}" if user.username else user.full_name
    msg = await bot.send_message(OPERATOR_ID, f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user.id})\nüü© –ó–∞–ø–∏—Ç –Ω–∞ –ó–µ–ª–µ–Ω—É –∫–∞—Ä—Ç–∫—É:\n–¢–µ—Ä–º—ñ–Ω: {message.text}")
    user_operator_map[msg.message_id] = user.id
    await message.answer("‚úÖ –î–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ß–µ–∫–∞–π—Ç–µ –≤–∞—Ä—ñ–∞–Ω—Ç–∏! üåç")
    await state.finish()

@dp.message_handler(Text(equals="üè• –ú–µ–¥–∏—á–Ω–µ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"))
async def medical(message: types.Message):
    await message.answer("üåç –í–∫–∞–∂—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –ø–æ—ó–∑–¥–∫–∏:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(back_button))
    await TravelInsurance.country.set()

@dp.message_handler(state=TravelInsurance.country)
async def get_country(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(country=message.text)
    await message.answer("üóìÔ∏è –í–∫–∞–∂—ñ—Ç—å –Ω–∞ —è–∫–∏–π —Ç–µ—Ä–º—ñ–Ω –±–∞–∂–∞—î—Ç–µ (–≤—ñ–¥ 10 –¥–Ω—ñ–≤ –¥–æ 12 –º—ñ—Å.):", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(back_button))
    await TravelInsurance.duration.set()

@dp.message_handler(state=TravelInsurance.duration)
async def medical_duration(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    data = await state.get_data()
    country = data.get("country", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    user = message.from_user
    username = f"@{user.username}" if user.username else user.full_name
    msg = await bot.send_message(OPERATOR_ID, f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user.id})\nüè• –ó–∞–ø–∏—Ç –Ω–∞ –º–µ–¥–∏—á–Ω–µ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:\n–ö—Ä–∞—ó–Ω–∞: {country}\n–¢–µ—Ä–º—ñ–Ω: {message.text}")
    user_operator_map[msg.message_id] = user.id
    await message.answer("‚úÖ –î–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ù–µ–∑–∞–±–∞—Ä–æ–º –∑–≤‚Äô—è–∂–µ–º–æ—Å—å! ‚úàÔ∏è")
    await state.finish()

@dp.message_handler(lambda m: m.chat.id == OPERATOR_ID and m.reply_to_message)
async def operator_reply(message: types.Message):
    original_id = message.reply_to_message.message_id
    user_id = user_operator_map.get(original_id)
    if user_id:
        await bot.send_message(user_id, f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
    else:
        await message.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
