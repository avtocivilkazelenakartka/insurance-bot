import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, Text
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

OPERATOR_ID = 7630696066  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID
user_operator_map = {}  # ID –∫–ª—ñ—î–Ω—Ç–∞ -> –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üöÄ –ü–æ—á–∞—Ç–∏")]
])

main_menu = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üöó –ê–≤—Ç–æ—Ü–∏–≤—ñ–ª–∫–∞"), KeyboardButton(text="üåç –ó–µ–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∫–∞")],
    [KeyboardButton(text="üè• –ú–µ–¥–∏—á–Ω–µ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è")]
])

back_button = KeyboardButton(text="üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫")

share_phone_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]
])

auto_menu = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üìÑ –ü–æ—Å—Ç—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∞"), KeyboardButton(text="üïò –¢—Ä–∞–Ω–∑–∏—Ç–Ω—ñ –Ω–æ–º–µ—Ä–∞")],
    [back_button]
])

duration_menu = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="15 –¥–Ω—ñ–≤"), KeyboardButton(text="1 –º—ñ—Å."), KeyboardButton(text="2 –º—ñ—Å."), KeyboardButton(text="3 –º—ñ—Å.")],
    [back_button]
])

# –°—Ç–∞–Ω FSM
class AutoForm(StatesGroup):
    number = State()
    engine = State()
    region = State()
    birth = State()
    term = State()

class GreenCard(StatesGroup):
    duration = State()

class TravelInsurance(StatesGroup):
    country = State()
    duration = State()

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! üëã\n–ù–∞—Ç–∏—Å–Ω–∏ \"–ü–æ—á–∞—Ç–∏\" —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∞—Ä—Ç—ñ—Å—Ç—å —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:", reply_markup=start_keyboard)

@dp.message(Text("üöÄ –ü–æ—á–∞—Ç–∏"))
async def on_start_pressed(message: types.Message, state: FSMContext):
    await state.clear()
    user = message.from_user
    if not user.username:
        await message.answer(
            "‚ö†Ô∏è –û—Å–∫—ñ–ª—å–∫–∏ —É –í–∞—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π username, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏:",
            reply_markup=share_phone_keyboard
        )
        return
    await message.answer("–û–±–µ—Ä–∏ –≤–∏–¥ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:", reply_markup=main_menu)

@dp.message(lambda m: m.contact)
async def contact_handler(message: types.Message):
    contact = message.contact
    await bot.send_message(OPERATOR_ID, f"üìû –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–¥—ñ–ª–∏–≤—Å—è –Ω–æ–º–µ—Ä–æ–º: {contact.phone_number} (ID: {message.from_user.id})")
    await message.answer("‚úÖ –î—è–∫—É—é! –ù–æ–º–µ—Ä –æ—Ç—Ä–∏–º–∞–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:", reply_markup=main_menu)

@dp.message(Text("üöó –ê–≤—Ç–æ—Ü–∏–≤—ñ–ª–∫–∞"))
async def auto_civilka(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–æ–º–µ—Ä—ñ–≤:", reply_markup=auto_menu)

@dp.message(Text("üìÑ –ü–æ—Å—Ç—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∞"))
async def permanent(message: types.Message, state: FSMContext):
    await state.set_state(AutoForm.number)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–µ—Ä–∂–∞–≤–Ω–∏–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[back_button]]))

@dp.message(Text("üïò –¢—Ä–∞–Ω–∑–∏—Ç–Ω—ñ –Ω–æ–º–µ—Ä–∞"))
async def transit(message: types.Message, state: FSMContext):
    await state.set_state(AutoForm.engine)
    await state.update_data(transit=True)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º –¥–≤–∏–≥—É–Ω–∞:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[back_button]]))

@dp.message(Text("üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫"))
async def go_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–±–µ—Ä–∏ –≤–∏–¥ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:", reply_markup=main_menu)

@dp.message(AutoForm.number)
async def get_number(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(number=message.text)
    await state.set_state(AutoForm.engine)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–±'—î–º –¥–≤–∏–≥—É–Ω–∞:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[back_button]]))

@dp.message(AutoForm.engine)
async def get_engine(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(engine=message.text)
    await state.set_state(AutoForm.region)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[back_button]]))

@dp.message(AutoForm.region)
async def get_region(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(region=message.text)
    await state.set_state(AutoForm.birth)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–º–æ–ª–æ–¥—à–æ–≥–æ –≤–æ–¥—ñ—è:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[back_button]]))

@dp.message(AutoForm.birth)
async def get_birth(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(birth=message.text)
    data = await state.get_data()
    if data.get("transit"):
        await state.set_state(AutoForm.term)
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:", reply_markup=duration_menu)
    else:
        await send_to_operator_and_finish(message, state)

@dp.message(AutoForm.term)
async def get_term(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(term=message.text)
    await send_to_operator_and_finish(message, state)

async def send_to_operator_and_finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user = message.from_user
    username = f"@{user.username}" if user.username else user.full_name
    text = f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user.id})\nüöò –ó–∞–ø–∏—Ç –Ω–∞ –ê–≤—Ç–æ—Ü–∏–≤—ñ–ª–∫—É:\n"
    for k, v in data.items():
        text += f"{k.capitalize()}: {v}\n"
    msg = await bot.send_message(OPERATOR_ID, text)
    user_operator_map[msg.message_id] = user.id
    await message.answer("‚úÖ –î–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ó–∞ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è! üíº")
    await state.clear()

@dp.message(Text("üåç –ó–µ–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∫–∞"))
async def green_card(message: types.Message, state: FSMContext):
    await state.set_state(GreenCard.duration)
    await message.answer("üóìÔ∏è –í–∫–∞–∂—ñ—Ç—å –Ω–∞ —è–∫–∏–π —Ç–µ—Ä–º—ñ–Ω –±–∞–∂–∞—î—Ç–µ (–≤—ñ–¥ 15 –¥–Ω—ñ–≤ –¥–æ 12 –º—ñ—Å.):", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[back_button]]))

@dp.message(GreenCard.duration)
async def green_card_duration(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    user = message.from_user
    username = f"@{user.username}" if user.username else user.full_name
    msg = await bot.send_message(OPERATOR_ID, f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user.id})\nüü© –ó–∞–ø–∏—Ç –Ω–∞ –ó–µ–ª–µ–Ω—É –∫–∞—Ä—Ç–∫—É:\n–¢–µ—Ä–º—ñ–Ω: {message.text}")
    user_operator_map[msg.message_id] = user.id
    await message.answer("‚úÖ –î–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ß–µ–∫–∞–π—Ç–µ –≤–∞—Ä—ñ–∞–Ω—Ç–∏! üåç")
    await state.clear()

@dp.message(Text("üè• –ú–µ–¥–∏—á–Ω–µ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"))
async def medical(message: types.Message, state: FSMContext):
    await state.set_state(TravelInsurance.country)
    await message.answer("üåç –í–∫–∞–∂—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –ø–æ—ó–∑–¥–∫–∏:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[back_button]]))

@dp.message(TravelInsurance.country)
async def get_country(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    await state.update_data(country=message.text)
    await state.set_state(TravelInsurance.duration)
    await message.answer("üóìÔ∏è –í–∫–∞–∂—ñ—Ç—å –Ω–∞ —è–∫–∏–π —Ç–µ—Ä–º—ñ–Ω –±–∞–∂–∞—î—Ç–µ (–≤—ñ–¥ 10 –¥–Ω—ñ–≤ –¥–æ 12 –º—ñ—Å.):", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[back_button]]))

@dp.message(TravelInsurance.duration)
async def medical_duration(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        return await go_back(message, state)
    data = await state.get_data()
    country = data.get("country", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    user = message.from_user
    username = f"@{user.username}" if user.username else user.full_name
    msg = await bot.send_message(OPERATOR_ID, f"üì© –ó–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user.id})\nüè• –ó–∞–ø–∏—Ç –Ω–∞ –º–µ–¥–∏—á–Ω–µ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:\n–ö—Ä–∞—ó–Ω–∞: {country}\n–¢–µ—Ä–º—ñ–Ω: {message.text}")
    user_operator_map[msg.message_id] = user.id
    await message.answer("‚úÖ –î–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ù–µ–∑–∞–±–∞—Ä–æ–º –∑–≤‚Äô—è–∂–µ–º–æ—Å—å! ‚úàÔ∏è")
    await state.clear()

@dp.message(lambda m: m.chat.id == OPERATOR_ID and m.reply_to_message)
async def operator_reply(message: types.Message):
    original_id = message.reply_to_message.message_id
    user_id = user_operator_map.get(original_id)
    if user_id:
        await bot.send_message(user_id, f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
    else:
        await message.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
